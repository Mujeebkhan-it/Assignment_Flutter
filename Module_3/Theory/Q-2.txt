Q - 2. Describe the widget lifecycle and how state is managed in Stateful widgets.
-----------------------------------------------------------------------------------

    - In Flutter, Stateful widgets have a lifecycle that allows them to manage mutable state and 
      respond to changes in the state. The lifecycle of a StatefulWidget is managed by the State class, 
      which is tied to the widget itself. Understanding the lifecycle helps developers manage 
      state effectively and ensure that the widget behaves as expected during different 
      phases of its existence.

Stateful Widget Lifecycle

    The lifecycle of a StatefulWidget consists of multiple stages. 
    The widget goes through different states as it is created, updated, and disposed of.

Here's a breakdown of the key lifecycle methods:

a. createState()
-----------------

When called: When the StatefulWidget is inserted into the widget tree for the first time.

Purpose: This method creates the mutable State object that will be associated with the StatefulWidget. 
         The State object holds the state data and manages the widget's rebuilds.

Example:

@override
_MyStatefulWidgetState createState() {
  return _MyStatefulWidgetState();
}


b. initState()
--------------

When called: Once the State object has been created, before the widget is built for the first time. 
             It is called only once during the lifecycle of a widget.

Purpose: This is where you can initialize state variables, set up animations, 
         subscribe to streams, or perform other one-time operations. You should avoid making calls that trigger builds directly in this method.

Example:

@override
void initState() {
  super.initState();
  _counter = 0;  // Initializing state variables.
  print("State Initialized.");
}


c. build()
----------

When called: Every time the framework needs to update the UI, 
             which happens when the state changes (e.g., via a call to setState()).

Purpose: This method describes the widget's UI in terms of other widgets.
         It is called frequently when the state changes, and the widget needs to be rebuilt with new data.

Example:

@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(title: Text("Stateful Widget Example")),
    body: Center(
      child: Text("Counter value: $_counter"),
    ),
  );
}


d. didChangeDependencies()
--------------------------

When called: This method is called immediately after initState() and every time the dependencies 
             of the widget change (e.g., when an inherited widget's data is updated). It can also be triggered if the parent widget rebuilds.

Purpose: Useful for performing operations that depend on objects or services provided 
         by the BuildContext, such as accessing inherited widgets.

Example:

@override
void didChangeDependencies() {
  super.didChangeDependencies();
  // You can use this to respond to changes in InheritedWidget.
  print("Dependencies Changed");
}


e. setState()
-------------

When called: This method is called when you want to update the widget's state. 
             Calling setState() triggers a rebuild of the widget, meaning the 
             build() method will be called again with the updated state.

Purpose: setState() notifies Flutter that the internal state has changed and the widget needs to be rebuilt.

Example:

void _incrementCounter() {
  setState(() {
    _counter++;
  });
}


f. deactivate()
---------------

When called: This method is called when the State object is removed from the widget tree. 
             For example, it might happen when the widget is moved to another part of the tree 
             or replaced by another widget.

Purpose: You can use this method to clean up or release resources that are no longer needed.

Example:

@override
void deactivate() {
  super.deactivate();
  // Cleanup resources, e.g., stopping animations or streams.
  print("Widget Deactivated");
}


g. dispose()
------------

When called: This is called when the State object is permanently removed from the widget tree, typically when the widget is no longer needed or when the app navigates away from the screen that holds the widget.

Purpose: It is used for cleaning up resources, such as cancelling animations, stopping streams, or disposing of controllers. Once the dispose() method is called, the state object is destroyed and cannot be reused.

Example:

@override
void dispose() {
  // Clean up controllers or subscriptions.
  _controller.dispose();
  print("Widget Disposed");
  super.dispose();
}

========================================================================================================
2. State Management in Stateful Widgets

State management in StatefulWidget is done through the State class. 
The State class is responsible for managing the mutable state and rebuilding the widget when necessary.

Hereâ€™s how state is managed:
    State is stored in the State class: The mutable data (such as counters, strings, or lists) 
    is stored in the State class, which is private to the widget. This ensures that only the widget and its associated state manage and control the data.

The build() method is responsible for rendering the UI: 
When the state changes (e.g., after setState() is called), the build() method is 
called again to rebuild the widget with the updated state.

State updates with setState() method: When a state change occurs (like a button press), 
setState() is called. This method marks the widget as "dirty," and Flutter 
schedules a rebuild of the widget to reflect the new state.

State persists across rebuilds: The State object itself persists 
across rebuilds of the widget. Only the UI part, built by the build() method, 
is updated. This allows the state to remain intact between builds.

Summary of Key Lifecycle Methods:
Method	Description

createState()	            Creates the mutable state object.
initState()	                Initializes the state before the widget is built for the first time.
didChangeDependencies()	    Called when dependencies change, right after initState().
build()	                    Describes the widget's UI and is called when the state changes.
deactivate()	            Called when the widget is removed temporarily from the widget tree.
dispose()	                Called when the widget is permanently removed from the tree, used for cleanup.

By understanding the widget lifecycle and state management in Flutter, you can create efficient, 
responsive, and well-organized apps.
