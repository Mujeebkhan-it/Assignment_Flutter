Q - 3. List and describe five common Flutter layout widgets (e.g., Container, Column, Row).
---------------------------------------------------------------------------------------

In Flutter, layout widgets are crucial for arranging and positioning child widgets on the screen. 
These widgets allow you to create flexible, responsive UIs. Below are five common Flutter layout widgets:


1. Container
-------------

Description: A Container is a versatile and widely used widget for creating boxes with specific dimensions, 
             padding, margins, decoration, and other visual elements. It is used to hold other widgets 
             and can be customized with various properties such as color, borders, padding, and size.

Use cases:
Wrapping a widget to apply styling or spacing.
Adding borders, shadows, or background color to a widget.

Example:
Container(
  padding: EdgeInsets.all(16.0),
  margin: EdgeInsets.symmetric(horizontal: 20.0),
  decoration: BoxDecoration(
    color: Colors.blue,
    borderRadius: BorderRadius.circular(10.0),
  ),
  child: Text("Hello, Container!"),
)

Explanation: The Container here wraps the Text widget and provides padding, margin, 
             and decoration (background color and rounded corners).


2. Column
----------

Description: A Column widget arranges its children vertically (i.e., in a top-to-bottom manner).
             It takes as many child widgets as needed and arranges them in a single vertical direction.
             You can use properties like mainAxisAlignment and crossAxisAlignment to align the children 
             along the main axis and the cross axis respectively.

Use cases:
Creating a vertical list of items or elements.
Grouping widgets in a vertical sequence.

Example:
Column(
  mainAxisAlignment: MainAxisAlignment.center,
  crossAxisAlignment: CrossAxisAlignment.center,
  children: <Widget>[
    Text("Item 1"),
    Text("Item 2"),
    Text("Item 3"),
  ],
)

Explanation: The Column arranges three Text widgets vertically. 
             The mainAxisAlignment aligns the children in the center of the column, 
             and crossAxisAlignment centers them horizontally.


3. Row
-------

Description: A Row widget arranges its children horizontally 
             (i.e., from left to right). Like Column, it also supports alignment of its 
             children along the main and cross axes using mainAxisAlignment and crossAxisAlignment.

Use cases:
Creating a horizontal list of items, like buttons or icons.
Grouping widgets in a horizontal sequence.

Example:
Row(
  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  children: <Widget>[
    Icon(Icons.home),
    Icon(Icons.search),
    Icon(Icons.notifications),
  ],
)

Explanation: The Row arranges the three Icon widgets horizontally. 
             The mainAxisAlignment property ensures the icons are spaced evenly across the width of the row.


4. Stack
--------

Description: A Stack widget allows you to layer widgets on top of each other. 
             It places each child widget relative to the others using the Positioned widget 
             to control the position of each child. It is useful when you want to overlay elements, 
             such as placing text over an image.

Use cases:
Creating complex designs with overlapping widgets.
Displaying floating or overlay elements.

Example:
Stack(
  children: <Widget>[
    Image.asset('assets/background.jpg'),
    Positioned(
      bottom: 10,
      left: 10,
      child: Text(
        "Overlay Text",
        style: TextStyle(color: Colors.white, fontSize: 24),
      ),
    ),
  ],
)

Explanation: The Stack allows you to overlay text on top of an image. 
             The Positioned widget is used to place the text at a specific location within the stack.


5. Expanded
-----------

Description: The Expanded widget is a flexible widget used inside a Column, 
             Row, or Flex to make a child widget take up the remaining space in the main axis. 
             It automatically sizes the child widget to fill the available space after other children 
             have been laid out.

Use cases:
Making a widget expand to fill available space in a flexible layout.
Ensuring child widgets take up equal space when needed.

Example:
Row(
  children: <Widget>[
    Container(width: 100, color: Colors.red),
    Expanded(
      child: Container(color: Colors.green),
    ),
    Container(width: 100, color: Colors.blue),
  ],
)

Explanation: The Expanded widget makes the middle container take up all the remaining space in 
            the Row after the red and blue containers have been placed. 
            It ensures that the green container stretches to fill available space.

---------------------------------------------------------------------------------------------------------------

Summary of Widgets:

---------------------------------------------------------------------------------------------------------------
Widget	      Description	                                         Common Use Cases
---------------------------------------------------------------------------------------------------------------

Container	  A versatile box for styling and                        Wrapping and styling widgets, 
              positioning with padding, margin, and decoration.	     adding background, borders, etc.

Column	      Arranges child widgets vertically (top to bottom).	 Creating vertical layouts, grouping items.

Row	          Arranges child widgets horizontally (left to right).	 Creating horizontal layouts, 
                                                                     displaying items side by side.

Stack	      Layers widgets on top of each other, with control      Overlaying elements,creating complex 
              over positioning.                                      layouts with floating widgets.            	

Expanded	  Makes a widget take up remaining space in 	         Expanding widgets to fill available 
              a Column, Row, or Flex.                                space in flexible layouts.

--------------------------------------------------------------------------------------------------------------
These layout widgets, along with others like ListView and GridView, provide powerful tools for 
creating complex, flexible, and responsive UIs in Flutter.